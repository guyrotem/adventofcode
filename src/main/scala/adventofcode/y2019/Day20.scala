package adventofcode.y2019

import scala.collection.mutable

object Day20 extends App {

  case class Item(text: String, location: GlobalLocation) {
    val _visited: mutable.Set[Int] = mutable.Set.empty
    val _distance: mutable.Map[Int, Int] = mutable.Map.empty

    def visit(distance: Int, depth: Int): Unit = {
      _visited.add(depth)
      _distance.put(depth, distance)
    }
  }

  case class Location(x: Int, y: Int, depth: Int) {
    def ignoreDepth = GlobalLocation(x, y)
  }
  case class GlobalLocation(x: Int, y: Int) {
    def atDepth(depth: Int) = Location(x, y, depth)
  }

  case class Gate(name: String, inner: GlobalLocation, outer: GlobalLocation)
  case class Portal(name: String, location: GlobalLocation, outer: Boolean)
  case class Gates(entrance: Location, exit: Location, gates: Seq[Gate])

  class Maze(
              val startPoint: Location,
              val endPoint: Location,
              _items: Seq[Seq[Item]],
              val gates: Seq[Gate],
              enableMultiLayers: Boolean = false,
            ) {
    var items: Seq[Seq[Item]] = _items

    val telePortal: Map[GlobalLocation, (GlobalLocation, Int)] =
      gates.flatMap(gate =>
        Seq(gate.inner -> (gate.outer, 1), gate.outer -> (gate.inner, -1))
      ).toMap

    private val height = items.length
    private val width = items(0).length

    def visit(location: Location, distance: Int): Option[Item] = {
      itemAt(location).map { item =>
        item.visit(distance, location.depth)
        item
      }
    }

    def visited(location: Location): Boolean = {
      //  visited or out of bounds
      itemAt(location)
        .forall(_._visited.contains(location.depth))
    }

    def itemAt(location: Location): Option[Item] = {
      items(location.y).find(_.location.x == location.x)
    }

    private val multiLayeredFactor = if (enableMultiLayers) 1 else 0

    def neighbors(cell: Location): Seq[Location] = {
      Seq(
        if (cell.x < width - 1) Some(Location(cell.x + 1, cell.y, cell.depth)) else None,
        if (cell.y < height - 1) Some(Location(cell.x, cell.y + 1, cell.depth)) else None,
        if (cell.x > 0) Some(Location(cell.x - 1, cell.y, cell.depth)) else None,
        if (cell.y > 0) Some(Location(cell.x, cell.y - 1, cell.depth)) else None,
        telePortal.get(cell.ignoreDepth).map(tRes => tRes._1.atDepth(depth = cell.depth + tRes._2 * multiLayeredFactor)).filter(_.depth >= 0),
      ).flatten
    }

  }

  def findGates(textMatrix: Array[Array[String]]) = {

    def isLetter(str: String) = str.charAt(0) >= 'A' && str.charAt(0) <= 'Z'

    val height = textMatrix.length - 4
    val width = textMatrix(2).filterNot(isLetter).filterNot(_ == " ").length

    val portals = mutable.ArrayBuffer[Portal]()

    def isExternalPortal(location: GlobalLocation) = {
      location.x == 2 || location.y == 2 || location.x == width + 1 || location.y == height + 1
    }

    def itemAt(rowIdx: Int, colIdx: Int) = {
      val row = textMatrix(rowIdx)
      if (row.length > colIdx)
        row(colIdx)
      else
        " "
    }

    //  vertical
    textMatrix(2).indices.map { colIndex =>
      (0 until textMatrix.length - 2).map { rowIndex =>
        if (itemAt(rowIndex, colIndex) == "." && isLetter(itemAt(rowIndex + 1, colIndex)) && isLetter(itemAt(rowIndex + 2, colIndex))) {
          val loc = GlobalLocation(colIndex, rowIndex)
          portals += Portal(itemAt(rowIndex + 1, colIndex) + itemAt(rowIndex + 2, colIndex), loc, isExternalPortal(loc))
        } else if (itemAt(rowIndex + 2, colIndex) == "." && isLetter(itemAt(rowIndex, colIndex)) && isLetter(itemAt(rowIndex + 1, colIndex))) {
          val loc = GlobalLocation(colIndex, rowIndex + 2)
          portals += Portal(itemAt(rowIndex, colIndex) + itemAt(rowIndex + 1, colIndex), loc, isExternalPortal(loc))

        }
      }
    }

    //  horizontal
    textMatrix(2).indices.map { colIndex =>
      (0 until textMatrix.length - 2).map { rowIndex =>
        if (itemAt(rowIndex, colIndex) == "." && isLetter(itemAt(rowIndex, colIndex + 1)) && isLetter(itemAt(rowIndex, colIndex + 2))) {
          val loc = GlobalLocation(colIndex, rowIndex)
          portals += Portal(itemAt(rowIndex, colIndex + 1) + itemAt(rowIndex, colIndex + 2), loc, isExternalPortal(loc))
        } else if (itemAt(rowIndex, colIndex + 2) == "." && isLetter(itemAt(rowIndex, colIndex)) && isLetter(itemAt(rowIndex, colIndex + 1))) {
          val loc = GlobalLocation(colIndex + 2, rowIndex)
          portals += Portal(itemAt(rowIndex, colIndex) + itemAt(rowIndex, colIndex + 1), loc, isExternalPortal(loc))
        }
      }
    }
    val adjustedPortals = portals.map(p => p.copy(location = GlobalLocation(p.location.x - 2, p.location.y - 2)))
    Gates(
      adjustedPortals.find(_.name == "AA").get.location.atDepth(0),
      adjustedPortals.find(_.name == "ZZ").get.location.atDepth(0),
      adjustedPortals
        .filterNot(_.name == "AA")
        .filterNot(_.name == "ZZ")
        .groupBy(_.name).view.mapValues(gatePortals =>
        Gate(gatePortals(0).name, gatePortals.find(!_.outer).map(_.location).get, gatePortals.find(_.outer).map(_.location).get)
      ).values.toSeq
    )
  }

  def parseInput(input: String, multiLayered: Boolean): Maze = {
    val textMatrix = input.split('\n').map(_.split("").filter(_.nonEmpty)).filter(_.nonEmpty)

    val mazeTextMatrix = textMatrix.drop(2).dropRight(2).map(_.drop(2))

    val maze = mazeTextMatrix.toSeq.zipWithIndex.map {
      case (row, rowIdx) => row.toSeq.zipWithIndex.map {
        case (cell, colIdx) =>
          Item(cell, GlobalLocation(colIdx, rowIdx))
      }
    }

    val gatesInfo = findGates(textMatrix)
    val gates = gatesInfo.gates
    val startPoint = gatesInfo.entrance
    val endPoint = gatesInfo.exit

    new Maze(
      startPoint,
      endPoint,
      maze.map(_.filter(_.text.trim.nonEmpty)).filter(_.nonEmpty),
      gates = gates,
      multiLayered,
    )
  }

  def bfs(maze: Maze, startFrom: Location, stop: Maze => Boolean = _ => false): Unit = {
    val queue = mutable.Queue.empty[(Location, Int)]

    queue.enqueue(maze.startPoint -> 0)

    while (queue.nonEmpty && !stop(maze)) {
      val (currentLocation, distance) = queue.dequeue()

      maze.visit(currentLocation, distance).map(_.text).filter(_ == ".").foreach { _ =>
        maze.neighbors(currentLocation)
          .filterNot(maze.visited)
          .foreach(item => queue.enqueue(item -> (distance + 1)))

      }

    }
  }

  case class MazePath(end: Location, length: Int)

  def solve(input: String, multiLayered: Boolean = false): Int = {
    val maze = parseInput(input, multiLayered)
    bfs(maze, maze.startPoint, m => m.itemAt(m.endPoint).exists(_._visited(0)))
    maze.itemAt(maze.endPoint).get._distance(0)
  }

  assert(solve(Day20Input.demo1) == 23)
  assert(solve(Day20Input.demo1, multiLayered = true) == 26)
  assert(solve(Day20Input.demo2) == 58)
  println(solve(Day20Input.input)) //  602

  assert(solve(Day20Input.demo3, multiLayered = true) == 396)
  println(solve(Day20Input.input, multiLayered = true)) //  6986
}

object Day20Input {

  val demo1 =
    """
      |         A
      |         A
      |  #######.#########
      |  #######.........#
      |  #######.#######.#
      |  #######.#######.#
      |  #######.#######.#
      |  #####  B    ###.#
      |BC...##  C    ###.#
      |  ##.##       ###.#
      |  ##...DE  F  ###.#
      |  #####    G  ###.#
      |  #########.#####.#
      |DE..#######...###.#
      |  #.#########.###.#
      |FG..#########.....#
      |  ###########.#####
      |             Z
      |             Z
      |""".stripMargin

  val demo2 =
    """
      |                   A
      |                   A
      |  #################.#############
      |  #.#...#...................#.#.#
      |  #.#.#.###.###.###.#########.#.#
      |  #.#.#.......#...#.....#.#.#...#
      |  #.#########.###.#####.#.#.###.#
      |  #.............#.#.....#.......#
      |  ###.###########.###.#####.#.#.#
      |  #.....#        A   C    #.#.#.#
      |  #######        S   P    #####.#
      |  #.#...#                 #......VT
      |  #.#.#.#                 #.#####
      |  #...#.#               YN....#.#
      |  #.###.#                 #####.#
      |DI....#.#                 #.....#
      |  #####.#                 #.###.#
      |ZZ......#               QG....#..AS
      |  ###.###                 #######
      |JO..#.#.#                 #.....#
      |  #.#.#.#                 ###.#.#
      |  #...#..DI             BU....#..LF
      |  #####.#                 #.#####
      |YN......#               VT..#....QG
      |  #.###.#                 #.###.#
      |  #.#...#                 #.....#
      |  ###.###    J L     J    #.#.###
      |  #.....#    O F     P    #.#...#
      |  #.###.#####.#.#####.#####.###.#
      |  #...#.#.#...#.....#.....#.#...#
      |  #.#####.###.###.#.#.#########.#
      |  #...#.#.....#...#.#.#.#.....#.#
      |  #.###.#####.###.###.#.#.#######
      |  #.#.........#...#.............#
      |  #########.###.###.#############
      |           B   J   C
      |           U   P   P
      |""".stripMargin

  val demo3 =
    """
      |             Z L X W       C
      |             Z P Q B       K
      |  ###########.#.#.#.#######.###############
      |  #...#.......#.#.......#.#.......#.#.#...#
      |  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###
      |  #.#...#.#.#...#.#.#...#...#...#.#.......#
      |  #.###.#######.###.###.#.###.###.#.#######
      |  #...#.......#.#...#...#.............#...#
      |  #.#########.#######.#.#######.#######.###
      |  #...#.#    F       R I       Z    #.#.#.#
      |  #.###.#    D       E C       H    #.#.#.#
      |  #.#...#                           #...#.#
      |  #.###.#                           #.###.#
      |  #.#....OA                       WB..#.#..ZH
      |  #.###.#                           #.#.#.#
      |CJ......#                           #.....#
      |  #######                           #######
      |  #.#....CK                         #......IC
      |  #.###.#                           #.###.#
      |  #.....#                           #...#.#
      |  ###.###                           #.#.#.#
      |XF....#.#                         RF..#.#.#
      |  #####.#                           #######
      |  #......CJ                       NM..#...#
      |  ###.#.#                           #.###.#
      |RE....#.#                           #......RF
      |  ###.###        X   X       L      #.#.#.#
      |  #.....#        F   Q       P      #.#.#.#
      |  ###.###########.###.#######.#########.###
      |  #.....#...#.....#.......#...#.....#.#...#
      |  #####.#.###.#######.#######.###.###.#.#.#
      |  #.......#.......#.#.#.#.#...#...#...#.#.#
      |  #####.###.#####.#.#.#.#.###.###.#.###.###
      |  #.......#.....#.#...#...............#...#
      |  #############.#.#.###.###################
      |               A O F   N
      |               A A D   M
      |""".stripMargin

  val input =
    """
      |                                           I     U       O   M           N     O       S
      |                                           X     T       X   C           D     N       A
      |  #########################################.#####.#######.###.###########.#####.#######.#######################################
      |  #.....#.......#.....#.....#.....#...#.#...#...#...#.....#.#...........#.....#.....#.............#.#...#...#...#.......#.....#
      |  #####.#######.#####.#####.#.###.###.#.#.###.#.###.#.#.###.###.###.#####.#.#######.#####.#.#######.###.#.###.###.#######.#####
      |  #.#.#...#...#.....#.........#...........#.#.#...#.#.#.....#...#.......#.#...#.#.....#.#.#...............#.........#.........#
      |  #.#.###.###.###.#####.#######.#####.#.###.#.###.#.#.#########.#.#########.###.#.#####.###.###.#####.#.#####.###.#########.###
      |  #.....#.........#.....#...#.#.....#.#.....#.#...#.#.#...#...#.#.....#...#.#.#.........#.....#.....#.#.........#.#...#...#...#
      |  #####.#####.#.#.###.#####.#.#.#####.#.#.#.#.###.#.#.###.###.#####.#####.#.#.#####.#######.###.#.#.#######.###.#####.###.#.###
      |  #...#.......#.#.......#.......#.#.#.#.#.#.#...#.#.#.......#.#.#.....#.........#.....#.....#.#.#.#.......#.#.........#.......#
      |  #.###############.#####.#####.#.#.#######.###.#.#.###.#.###.#.#.#.###.###.#####.#######.#.#.###.#.###.#.#.###.#####.#####.#.#
      |  #...#.#.#...#.......#.......#...#.....#...#...#.#.#...#.....#...#...#.#...#.......#...#.#.....#.#...#.#.#.#.#.#.....#.#.#.#.#
      |  #.###.#.#.#######.#.#.#.#####.###.###.#.#.#.###.#.#.###.#.###.###########.#####.#####.###.#.#.#.#.#########.###.#####.#.#.###
      |  #.#.......#...#...#.#.#...#...#.#.#.....#.#...#...#.#...#.#.......#.#.#.#.#.........#.....#.#.#.#...........#.#...#.#.#.#...#
      |  #.###.###.#.#####.###.#.###.###.###.#####.###.#.#.#.#############.#.#.#.#.#######.#.###.#.#####.#.#.#####.#.#.#####.#.#.#.###
      |  #.#...#...#.#.#.#...#.#...#.#.....#.#.....#...#.#.#...#.#.#...........#.....#.....#.#...#.....#.#.#.....#.#.....#...#.#.#.#.#
      |  #.#######.#.#.#.#.#############.#####.###.#.#######.#.#.#.#.###.#.#####.#########.#####.#################.#######.#.#.#.#.#.#
      |  #.....#.......#.#.#...#...#...#...#.#.#...#.....#...#.#.....#.#.#.#.......#.#.#...#.......#.#...#.#.....#.....#.#.#.....#...#
      |  ###.#########.#.###.#####.#.###.###.###.#.#.#######.###.###.#.#######.###.#.#.#.#.#.#####.#.#.###.#.#.#####.###.#######.#.###
      |  #.#.....#.#...#...#...#.#.#...#...#...#.#.#.....#...#...#.......#...#.#.......#.#.#.#.........#.....#...#.#.#.#...#.........#
      |  #.###.###.###.###.#.###.#.###.#.#####.###.#.#.###.#.#########.###.#.#####.#######.###.###.#####.#.#.#####.###.###.#######.###
      |  #.........#.#...#.#.#...........#.#.......#.#...#.#.#...#.........#.#.....#.#.......#.#.#.#.#...#.#.#.....#.#...#.#.....#...#
      |  ###.#.#####.#.###.#.#####.#####.#.#######.#.###.###.#.#####.#.#.#########.#.#####.#####.#.#.#.#.#######.###.#.###.#.#.###.###
      |  #.#.#.#...#.........#.#.#.#.#.#...#.#.....#.#.#.#.......#.#.#.#.#...........#.#.......#.....#.#.#.#...#...#...#.....#...#.#.#
      |  #.#.#####.#.###.###.#.#.###.#.#.#.#.#####.#.#.#.###.#.###.#####.#####.#######.###.#######.###.#.#.#.###.#####.###.#.###.#.#.#
      |  #...#.#.#.#.#.#.#.....#.........#.#...#...#...#.#...#.#...#.......#...#...#...........#.#.....#.#...#.#.#...#...#.#.#.......#
      |  ###.#.#.#.###.#####.#.#####.#.#.###.###.#.#.#.#####.#####.#.#.#.#.#.###.#.#.###.#.#.###.#.#.#####.###.#.###.#.#.#########.###
      |  #...#.#...#...#.#.#.#.......#.#.........#.#.#.#...........#.#.#.#.#.#...#.#...#.#.#.#.#.#.#.#.............#.#.#.#.....#.#.#.#
      |  ###.#.#.###.###.#.###.#.#.#####.###.#####.#.#######.#############.#.#.###.###.#######.#.#.###.###.#.#######.#.#######.#.#.#.#
      |  #.#.....#.#.#.#.#.....#.#.#.#...#.......#.#...#...........#...#...#...#...#...#...#...........#...#.#.#...#.....#...#.#.....#
      |  #.#####.#.#.#.#.#########.#.#.#.#.#.###.###.#######.#######.###.###.###.#.###.#.#####.###.#.#########.#.###.#######.#.###.###
      |  #...#.....#.#.#.#.#.#...#.#...#.#.#.#.#...#.......#.........#.....#.#...#.#.....#.#.#...#.#.#.#...#.....#.....#.#...#.#.....#
      |  #.#######.#.#.#.#.#.#.###.#.#.#.#.###.###.#.#.#####.#.###.#####.#######.###.#.###.#.#.#.#.#.#.###.###.#####.#.#.#.###.#.#####
      |  #...#.#...#...........#...#.#.#.#.#.......#.#...#...#.#...#.......#.......#.#...#.....#.#.#...#.......#...#.#.......#.....#.#
      |  #.#.#.###.###.###.#############.#########.###.#########.#####.#######.#####.#######.#################.#.#######.#####.###.#.#
      |  #.#.....#.#.#.#.#.....#.#.....#.#        C   S         P     R       W     B       A        #...#.#...#...#.#.....#...#...#.#
      |  ###.#.###.#.#.#.#######.###.###.#        S   A         P     D       A     E       D        #.###.###.#.###.#.###########.#.#
      |  #...#.#...........#...#.....#...#                                                           #.#.......#.........#.#.#.....#.#
      |  ###.#####.#####.###.###.###.#####                                                           #.#####.#.#.#.#.#.###.#.###.#.#.#
      |  #...#.#...#.........#.....#.#...#                                                           #.....#.#...#.#.#.#.#.......#...#
      |  ###.#.###.#.###########.#####.###                                                           #.#.#.#.###.###.#.#.#######.#.#.#
      |EY........#.#...#...#.#.......#.#.#                                                           #.#.#.#...#.#.#.#...#.......#.#.#
      |  #.###.#.#.#.#.#.#.#.###.#####.#.#                                                           #.#.#####.###.###.#####.#.###.###
      |  #.#...#...#.#...#................RB                                                       VN..#.......#.....#.......#.#......CS
      |  #############.#########.#.#######                                                           #############.#.###.#######.###.#
      |  #...#.#...#.....#.#.#...#.#.....#                                                           #.........#...#.#...#.#...#...#.#
      |  #.###.###.###.###.#.###.#####.#.#                                                           ###.###.###.#.#######.#.#########
      |BE....#...#...#.#.......#.#.#...#.#                                                         ON..#.#...#...#.#...#...#.#.#...#.#
      |  #.#####.###.#######.#####.###.#.#                                                           #.#.#.#####.#.#.#####.#.#.#.###.#
      |  #.#.#.......#.........#.....#.#.#                                                           #.#.#.#...#.#.#.#.........#.#.#..MR
      |  #.#.#.#####.#####.#.#.###.###.#.#                                                           #.#.#.#####.#.#.###.#.#####.#.#.#
      |  #.....#...#.......#.#.........#..QG                                                       WP....#.......#.......#............VN
      |  #######.###.###.###.#############                                                           ###.###########.#.#######.#######
      |ZM........#.....#...#.#...#.....#.#                                                           #.#...#...#...#.#.#.....#.#.....#
      |  #.#.#########.#.#####.#######.#.#                                                           #.#####.#.###.#######.#.###.#.###
      |  #.#.......#.#.#.....#.#.....#....ND                                                       UE........#...........#.#.#...#...#
      |  ###.#######.#########.###.#.#.###                                                           #.###.#.#.#####.###.#.#.###.#.###
      |  #...#...#...#...#.......#.#.....#                                                           #.#.#.#.#...#...#...#.#.....#....GN
      |  #.#####.###.#.###.###.#####.#.###                                                           #.#.###########.#.###.#####.#.#.#
      |  #...................#.......#...#                                                           #.#.......#.#.#.#.......#...#.#.#
      |  #####.#####.###.#.#####.#########                                                           ###.#.#.###.#.###.###############
      |  #...#.....#.#...#.#...#.#.#.....#                                                         UT....#.#.#.#.#...#.#.#.......#....WA
      |  #.#.###############.###.#.#.#####                                                           ###.#####.#.#.###.#.#.###.#.#.#.#
      |WP..#...#.....#.#.#.....#.#.......#                                                           #.....#.....#.#.....#.#...#...#.#
      |  #.#.#.###.###.#.###.#.###.#.#####                                                           #.#.#.###.###.#########.###.#.###
      |  #.#.#.....#.....#.#.#.....#.....#                                                           #.#.#.#.......#.#.#.....#...#.#.#
      |  #######.#.#.#.###.#.#.#.#.#######                                                           #.#####.###.#.#.#.#####.###.#.#.#
      |  #...#.#.#...#.......#.#.#........OX                                                         #.........#.#...........#...#.#.#
      |  #.###.###########.###.###.#.###.#                                                           #.#######.#####.###########.###.#
      |  #.......#.....#...#...#...#.#...#                                                           #.#.....#.#.#.#.#.......#...#....PP
      |  #.###.#.###.#.###################                                                           ###.###.###.#.###.#.###.#####.###
      |NO..#...#.#...#.#.#.....#...#.....#                                                         ZR..#.#.#...#.....#.#.#.....#.....#
      |  ###.#####.###.#.#.#####.###.###.#                                                           #.#.#.#.#####.#####.###.#####.#.#
      |  #...#...#...#.....#.#.........#..FK                                                         #.....#.....#.#...#.#...#...#.#.#
      |  #.###.#.###.#####.#.###.#.#.#.#.#                                                           #.###.###.###.###.#.###.#.#.###.#
      |ZZ......#.......#.#.......#.#.#.#.#                                                           #.#...#.............#.....#.....#
      |  #.###.###.#.###.###.#############                                                           ###.#####.###.#################.#
      |  #.#...#.#.#.......#.#.#.........#                                                           #.....#.....#.#...............#.#
      |  #######.#####.#.#.###.#.###.###.#                                                           #########.#####.###.#######.#####
      |RX..#.#.#.....#.#.#.#.#.....#.#....GN                                                         #.#...#...#.....#.....#.#........UE
      |  #.#.#.#.#.#########.###.#.###.#.#                                                           #.#.#####.###.#.###.###.###.###.#
      |  #.....#.#.....#.#.....#.#...#.#.#                                                         ZM....#...#.#...#.#.#.......#...#.#
      |  #.#.#.#.#.#####.###.#####.#.#.#.#                                                           #.#.###.###.#.###.#.#.#####.###.#
      |  #.#.#...#.................#.#.#.#                                                           #.#.........#...#...#...#.....#.#
      |  #.###.#.#####.###.#.#####.#####.#    M       P           I     R     E     N           M    #.###.#.#.###.#######.#####.###.#
      |  #.#...#.....#...#.#...#.#...#.#.#    C       G           X     X     Y     O           R    #...#.#.#.#...#.....#.....#...#.#
      |  #####.###.###.#.#.#####.#.###.#######.#######.###########.#####.#####.#####.###########.#########.#######.#.#####.#.#.###.###
      |  #.#.#...#.#...#.#.#.............#.....#.#.#...#...#.........#...#.......#.......#.#...#.#.......#.#.............#.#.#.#.#...#
      |  #.#.#.#.#.###.###.###.###.###.###.#.#.#.#.###.#.#.###.#########.#######.#######.#.###.#.###.#.#####.###.#.###.#########.#####
      |  #...#.#.#...#...#...#...#...#.#...#.#...#.#.....#.#...#.....#...#.#.#.#.....#.#.#.#.#.#.....#.#...#...#.#.#.............#...#
      |  ###.#.#######.#.#####.###.#.#####.#.###.#.#######.#.###.#.###.#.#.#.#.###.###.#.#.#.#.#.#######.#######.#####.###.#######.###
      |  #.......#.....#.#.......#.#...#...#.#.....#...#.#.#.....#...#.#.#...........#.#...#...#...........#.#.#...#.....#...........#
      |  #.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.###.###.#.#.#######.#####.###.###.#.###.#.###.#.#.#.###.#.#.#.#.#.###.#.###.###.###.###
      |  #.#.#.#.#.#.#.#.#.#.#.#.#...#...#.#.#.#.#.#.#.........#...#.#...#.....#.#...#...#...#...#...#.#.#.#.#...#...#.#.....#.#.#...#
      |  ###.#.#####.#######.#.###.###.###.#####.#.#.#.#####.#####.#.###.#####.#.#.#####.#.#.###.#######.#.#.#.#######.#######.#.#####
      |  #...#...#...#.#.#...#...#.#.#...#.#.......#...#.#...#.....#.....#.....#.#...#...#.#.#.........#.#.#...#.........#...........#
      |  ###.#####.###.#.#.#.#######.#.#########.#.#.###.#.#####.#.#.#.#####.#####.#####.#.#########.#########.#####.#.###.#####.###.#
      |  #.....#.....#.....#.......#.....#.......#.#.....#...#...#.#.#.....#.#.#.#.#...#.#.......#...........#.#.#.#.#...#...#.....#.#
      |  ###.#.###.#######.###.###.###.###.###.###.#.#.###.###.###.#######.#.#.#.#####.#.#.#.#########.###.#.#.#.#.#####.#.#.#.#.#.#.#
      |  #...#...#...#.#.....#.#.....#.#...#.#.#...#.#...#.#.#.#.#.#.#...#.#.....#.#...#.#.#.........#.#.#.#.#.........#.#.#.#.#.#.#.#
      |  #.###.#.###.#.#.#.#.#####.#########.#####.#.#######.###.#.#.###.#.#.###.#.###.#.#####.#######.#.#######.#.#########.###.#.#.#
      |  #.#...#.#...#...#.#.#.......#...#.#.......#.#.......#...#...#...#.#...#.#.#.......#...#.#.#.#...#.....#.#.#.#...#.....#.#.#.#
      |  #.#.#.#.#####.#.#.#####.#####.###.#.#####.#.###.#######.#.#####.#.#####.#.###.#######.#.#.#.###.#.#####.###.#.#####.#.#######
      |  #.#.#.#...#...#.#.#.......#.#.#.#.#.#.#.#.#.#...#.#.#...#...#.#.......#.....#...#...........#.#...#.#.....#...#...#.#...#.#.#
      |  ###.###.#.#.#########.#####.#.#.#.###.#.#.#.###.#.#.###.#.###.#.###.#.###.###.#####.###.#####.#####.#.#.###.#####.###.###.#.#
      |  #.....#.#.#.#.........#.......#.#...#.....#.....#.....#...#.......#.#...#.#.......#...#.......#.....#.#...#...#.....#.#.#...#
      |  #.#.###.#.#.#.###.#.#######.#.#.#.#####.#.#.###.###.#.#.#####.#.#####.###.###.#########.###.#.###.#####.###.###.#.#####.#.###
      |  #.#...#.#.#.#.#.#.#...#.....#.........#.#.#.#.....#.#.#...#.#.#...#.#.#.#.#.......#.......#.#...#...#.#.........#...........#
      |  #.#.###.#######.#.#.#####.#########.#####.#######.#.#.#.###.###.#.#.###.#.#####.#######.#########.###.#.###.#.#.###.#.#.###.#
      |  #.#.#.......#...#.#.#.#...#...#.....#.#...#.......#.#.......#...#.#.........#...#...............#.#.#.#.#.#.#.#...#.#.#.#.#.#
      |  #.#####.#######.#####.#######.#.###.#.###.#.#######.###########.#.#.###########.#####.###.###.###.#.#.###.###.#.#####.###.###
      |  #.#.....#...............#.......#.....#...#.......#...#...#...#.#.#...#.......#.....#...#...#...#.......#...#.#.....#.#...#.#
      |  #.#.###.#.#.#.#.#######.#.#.#.#######.###.#######.###.###.#.#.###.###.#####.#.#.#.###.###########.###.###.#####.#.#####.###.#
      |  #.#.#...#.#.#.#.#.#.......#.#...#.........#.........#...#.#.#...#.#.#...#.#.#...#.#.......#.........#.........#.#.#...#...#.#
      |  #.#.###.###.#####.#.#####.#.#####.###.#.###.#.#######.###.###.#.#.#.###.#.#.###.#####.#.###.#####.#.#.###.#####.#####.#.###.#
      |  #.#.#.#.#...#...#...#.....#.#.....#...#.#.#.#...#...#...#.#...#...#.......#...#.....#.#.......#.#.#.#.#.....#.#.............#
      |  #####.#.#.#.#.#.###.#.###.#####.#####.###.#.###.#.#.#.###.#.#######.###.#####.#######.#.#.#.###.#.#.###.#####.###.#.#.###.#.#
      |  #.......#.#.#.#.....#.#.....#...#.......#.....#.#.#.......#.......#...#.#...........#.#.#.#.....#.#.#...........#.#.#...#.#.#
      |  #####################################.#######.#########.#.#######.#.###########.#######.#####################################
      |                                       Z       A         R A       F Q           R       P
      |                                       R       D         B A       K G           D       G
      |""".stripMargin
}
